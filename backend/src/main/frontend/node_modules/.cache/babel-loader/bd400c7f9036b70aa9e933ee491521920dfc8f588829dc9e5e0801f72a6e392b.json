{"ast":null,"code":"var http = require('http'),\n  https = require('https'),\n  common = require('../common');\n\n/*!\n * Array of passes.\n *\n * A `pass` is just a function that is executed on `req, socket, options`\n * so that you can easily add new checks while still keeping the base\n * flexible.\n */\n\n/*\n * Websockets Passes\n *\n */\n\nmodule.exports = {\n  /**\n   * WebSocket requests must have the `GET` method and\n   * the `upgrade:websocket` header\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {Socket} Websocket\n   *\n   * @api private\n   */\n\n  checkMethodAndHeader: function checkMethodAndHeader(req, socket) {\n    if (req.method !== 'GET' || !req.headers.upgrade) {\n      socket.destroy();\n      return true;\n    }\n    if (req.headers.upgrade.toLowerCase() !== 'websocket') {\n      socket.destroy();\n      return true;\n    }\n  },\n  /**\n   * Sets `x-forwarded-*` headers if specified in config.\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {Socket} Websocket\n   * @param {Object} Options Config object passed to the proxy\n   *\n   * @api private\n   */\n\n  XHeaders: function XHeaders(req, socket, options) {\n    if (!options.xfwd) return;\n    var values = {\n      for: req.connection.remoteAddress || req.socket.remoteAddress,\n      port: common.getPort(req),\n      proto: common.hasEncryptedConnection(req) ? 'wss' : 'ws'\n    };\n    ['for', 'port', 'proto'].forEach(function (header) {\n      req.headers['x-forwarded-' + header] = (req.headers['x-forwarded-' + header] || '') + (req.headers['x-forwarded-' + header] ? ',' : '') + values[header];\n    });\n  },\n  /**\n   * Does the actual proxying. Make the request and upgrade it\n   * send the Switching Protocols request and pipe the sockets.\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {Socket} Websocket\n   * @param {Object} Options Config object passed to the proxy\n   *\n   * @api private\n   */\n  stream: function stream(req, socket, options, head, server, clb) {\n    var createHttpHeader = function (line, headers) {\n      return Object.keys(headers).reduce(function (head, key) {\n        var value = headers[key];\n        if (!Array.isArray(value)) {\n          head.push(key + ': ' + value);\n          return head;\n        }\n        for (var i = 0; i < value.length; i++) {\n          head.push(key + ': ' + value[i]);\n        }\n        return head;\n      }, [line]).join('\\r\\n') + '\\r\\n\\r\\n';\n    };\n    common.setupSocket(socket);\n    if (head && head.length) socket.unshift(head);\n    var proxyReq = (common.isSSL.test(options.target.protocol) ? https : http).request(common.setupOutgoing(options.ssl || {}, options, req));\n\n    // Enable developers to modify the proxyReq before headers are sent\n    if (server) {\n      server.emit('proxyReqWs', proxyReq, req, socket, options, head);\n    }\n\n    // Error Handler\n    proxyReq.on('error', onOutgoingError);\n    proxyReq.on('response', function (res) {\n      // if upgrade event isn't going to happen, close the socket\n      if (!res.upgrade) {\n        socket.write(createHttpHeader('HTTP/' + res.httpVersion + ' ' + res.statusCode + ' ' + res.statusMessage, res.headers));\n        res.pipe(socket);\n      }\n    });\n    proxyReq.on('upgrade', function (proxyRes, proxySocket, proxyHead) {\n      proxySocket.on('error', onOutgoingError);\n\n      // Allow us to listen when the websocket has completed\n      proxySocket.on('end', function () {\n        server.emit('close', proxyRes, proxySocket, proxyHead);\n      });\n\n      // The pipe below will end proxySocket if socket closes cleanly, but not\n      // if it errors (eg, vanishes from the net and starts returning\n      // EHOSTUNREACH). We need to do that explicitly.\n      socket.on('error', function () {\n        proxySocket.end();\n      });\n      common.setupSocket(proxySocket);\n      if (proxyHead && proxyHead.length) proxySocket.unshift(proxyHead);\n\n      //\n      // Remark: Handle writing the headers to the socket when switching protocols\n      // Also handles when a header is an array\n      //\n      socket.write(createHttpHeader('HTTP/1.1 101 Switching Protocols', proxyRes.headers));\n      proxySocket.pipe(socket).pipe(proxySocket);\n      server.emit('open', proxySocket);\n      server.emit('proxySocket', proxySocket); //DEPRECATED.\n    });\n\n    return proxyReq.end(); // XXX: CHECK IF THIS IS THIS CORRECT\n\n    function onOutgoingError(err) {\n      if (clb) {\n        clb(err, req, socket);\n      } else {\n        server.emit('error', err, req, socket);\n      }\n      socket.end();\n    }\n  }\n};","map":{"version":3,"names":["http","require","https","common","module","exports","checkMethodAndHeader","req","socket","method","headers","upgrade","destroy","toLowerCase","XHeaders","options","xfwd","values","for","connection","remoteAddress","port","getPort","proto","hasEncryptedConnection","forEach","header","stream","head","server","clb","createHttpHeader","line","Object","keys","reduce","key","value","Array","isArray","push","i","length","join","setupSocket","unshift","proxyReq","isSSL","test","target","protocol","request","setupOutgoing","ssl","emit","on","onOutgoingError","res","write","httpVersion","statusCode","statusMessage","pipe","proxyRes","proxySocket","proxyHead","end","err"],"sources":["C:/Users/user/Desktop/git/toy/src/main/frontend/node_modules/http-proxy/lib/http-proxy/passes/ws-incoming.js"],"sourcesContent":["var http   = require('http'),\n    https  = require('https'),\n    common = require('../common');\n\n/*!\n * Array of passes.\n *\n * A `pass` is just a function that is executed on `req, socket, options`\n * so that you can easily add new checks while still keeping the base\n * flexible.\n */\n\n/*\n * Websockets Passes\n *\n */\n\n\nmodule.exports = {\n  /**\n   * WebSocket requests must have the `GET` method and\n   * the `upgrade:websocket` header\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {Socket} Websocket\n   *\n   * @api private\n   */\n\n  checkMethodAndHeader : function checkMethodAndHeader(req, socket) {\n    if (req.method !== 'GET' || !req.headers.upgrade) {\n      socket.destroy();\n      return true;\n    }\n\n    if (req.headers.upgrade.toLowerCase() !== 'websocket') {\n      socket.destroy();\n      return true;\n    }\n  },\n\n  /**\n   * Sets `x-forwarded-*` headers if specified in config.\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {Socket} Websocket\n   * @param {Object} Options Config object passed to the proxy\n   *\n   * @api private\n   */\n\n  XHeaders : function XHeaders(req, socket, options) {\n    if(!options.xfwd) return;\n\n    var values = {\n      for  : req.connection.remoteAddress || req.socket.remoteAddress,\n      port : common.getPort(req),\n      proto: common.hasEncryptedConnection(req) ? 'wss' : 'ws'\n    };\n\n    ['for', 'port', 'proto'].forEach(function(header) {\n      req.headers['x-forwarded-' + header] =\n        (req.headers['x-forwarded-' + header] || '') +\n        (req.headers['x-forwarded-' + header] ? ',' : '') +\n        values[header];\n    });\n  },\n\n  /**\n   * Does the actual proxying. Make the request and upgrade it\n   * send the Switching Protocols request and pipe the sockets.\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {Socket} Websocket\n   * @param {Object} Options Config object passed to the proxy\n   *\n   * @api private\n   */\n  stream : function stream(req, socket, options, head, server, clb) {\n\n    var createHttpHeader = function(line, headers) {\n      return Object.keys(headers).reduce(function (head, key) {\n        var value = headers[key];\n\n        if (!Array.isArray(value)) {\n          head.push(key + ': ' + value);\n          return head;\n        }\n\n        for (var i = 0; i < value.length; i++) {\n          head.push(key + ': ' + value[i]);\n        }\n        return head;\n      }, [line])\n      .join('\\r\\n') + '\\r\\n\\r\\n';\n    }\n\n    common.setupSocket(socket);\n\n    if (head && head.length) socket.unshift(head);\n\n\n    var proxyReq = (common.isSSL.test(options.target.protocol) ? https : http).request(\n      common.setupOutgoing(options.ssl || {}, options, req)\n    );\n\n    // Enable developers to modify the proxyReq before headers are sent\n    if (server) { server.emit('proxyReqWs', proxyReq, req, socket, options, head); }\n\n    // Error Handler\n    proxyReq.on('error', onOutgoingError);\n    proxyReq.on('response', function (res) {\n      // if upgrade event isn't going to happen, close the socket\n      if (!res.upgrade) {\n        socket.write(createHttpHeader('HTTP/' + res.httpVersion + ' ' + res.statusCode + ' ' + res.statusMessage, res.headers));\n        res.pipe(socket);\n      }\n    });\n\n    proxyReq.on('upgrade', function(proxyRes, proxySocket, proxyHead) {\n      proxySocket.on('error', onOutgoingError);\n\n      // Allow us to listen when the websocket has completed\n      proxySocket.on('end', function () {\n        server.emit('close', proxyRes, proxySocket, proxyHead);\n      });\n\n      // The pipe below will end proxySocket if socket closes cleanly, but not\n      // if it errors (eg, vanishes from the net and starts returning\n      // EHOSTUNREACH). We need to do that explicitly.\n      socket.on('error', function () {\n        proxySocket.end();\n      });\n\n      common.setupSocket(proxySocket);\n\n      if (proxyHead && proxyHead.length) proxySocket.unshift(proxyHead);\n\n      //\n      // Remark: Handle writing the headers to the socket when switching protocols\n      // Also handles when a header is an array\n      //\n      socket.write(createHttpHeader('HTTP/1.1 101 Switching Protocols', proxyRes.headers));\n\n      proxySocket.pipe(socket).pipe(proxySocket);\n\n      server.emit('open', proxySocket);\n      server.emit('proxySocket', proxySocket);  //DEPRECATED.\n    });\n\n    return proxyReq.end(); // XXX: CHECK IF THIS IS THIS CORRECT\n\n    function onOutgoingError(err) {\n      if (clb) {\n        clb(err, req, socket);\n      } else {\n        server.emit('error', err, req, socket);\n      }\n      socket.end();\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}