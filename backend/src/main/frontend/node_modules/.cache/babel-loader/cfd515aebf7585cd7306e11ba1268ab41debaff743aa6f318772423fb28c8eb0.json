{"ast":null,"code":"var url = require('url'),\n  common = require('../common');\nvar redirectRegex = /^201|30(1|2|7|8)$/;\n\n/*!\n * Array of passes.\n *\n * A `pass` is just a function that is executed on `req, res, options`\n * so that you can easily add new checks while still keeping the base\n * flexible.\n */\n\nmodule.exports = {\n  // <--\n\n  /**\n   * If is a HTTP 1.0 request, remove chunk headers\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {IncomingMessage} Res Response object\n   * @param {proxyResponse} Res Response object from the proxy request\n   *\n   * @api private\n   */\n  removeChunked: function removeChunked(req, res, proxyRes) {\n    if (req.httpVersion === '1.0') {\n      delete proxyRes.headers['transfer-encoding'];\n    }\n  },\n  /**\n   * If is a HTTP 1.0 request, set the correct connection header\n   * or if connection header not present, then use `keep-alive`\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {IncomingMessage} Res Response object\n   * @param {proxyResponse} Res Response object from the proxy request\n   *\n   * @api private\n   */\n  setConnection: function setConnection(req, res, proxyRes) {\n    if (req.httpVersion === '1.0') {\n      proxyRes.headers.connection = req.headers.connection || 'close';\n    } else if (req.httpVersion !== '2.0' && !proxyRes.headers.connection) {\n      proxyRes.headers.connection = req.headers.connection || 'keep-alive';\n    }\n  },\n  setRedirectHostRewrite: function setRedirectHostRewrite(req, res, proxyRes, options) {\n    if ((options.hostRewrite || options.autoRewrite || options.protocolRewrite) && proxyRes.headers['location'] && redirectRegex.test(proxyRes.statusCode)) {\n      var target = url.parse(options.target);\n      var u = url.parse(proxyRes.headers['location']);\n\n      // make sure the redirected host matches the target host before rewriting\n      if (target.host != u.host) {\n        return;\n      }\n      if (options.hostRewrite) {\n        u.host = options.hostRewrite;\n      } else if (options.autoRewrite) {\n        u.host = req.headers['host'];\n      }\n      if (options.protocolRewrite) {\n        u.protocol = options.protocolRewrite;\n      }\n      proxyRes.headers['location'] = u.format();\n    }\n  },\n  /**\n   * Copy headers from proxyResponse to response\n   * set each header in response object.\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {IncomingMessage} Res Response object\n   * @param {proxyResponse} Res Response object from the proxy request\n   * @param {Object} Options options.cookieDomainRewrite: Config to rewrite cookie domain\n   *\n   * @api private\n   */\n  writeHeaders: function writeHeaders(req, res, proxyRes, options) {\n    var rewriteCookieDomainConfig = options.cookieDomainRewrite,\n      rewriteCookiePathConfig = options.cookiePathRewrite,\n      preserveHeaderKeyCase = options.preserveHeaderKeyCase,\n      rawHeaderKeyMap,\n      setHeader = function (key, header) {\n        if (header == undefined) return;\n        if (rewriteCookieDomainConfig && key.toLowerCase() === 'set-cookie') {\n          header = common.rewriteCookieProperty(header, rewriteCookieDomainConfig, 'domain');\n        }\n        if (rewriteCookiePathConfig && key.toLowerCase() === 'set-cookie') {\n          header = common.rewriteCookieProperty(header, rewriteCookiePathConfig, 'path');\n        }\n        res.setHeader(String(key).trim(), header);\n      };\n    if (typeof rewriteCookieDomainConfig === 'string') {\n      //also test for ''\n      rewriteCookieDomainConfig = {\n        '*': rewriteCookieDomainConfig\n      };\n    }\n    if (typeof rewriteCookiePathConfig === 'string') {\n      //also test for ''\n      rewriteCookiePathConfig = {\n        '*': rewriteCookiePathConfig\n      };\n    }\n\n    // message.rawHeaders is added in: v0.11.6\n    // https://nodejs.org/api/http.html#http_message_rawheaders\n    if (preserveHeaderKeyCase && proxyRes.rawHeaders != undefined) {\n      rawHeaderKeyMap = {};\n      for (var i = 0; i < proxyRes.rawHeaders.length; i += 2) {\n        var key = proxyRes.rawHeaders[i];\n        rawHeaderKeyMap[key.toLowerCase()] = key;\n      }\n    }\n    Object.keys(proxyRes.headers).forEach(function (key) {\n      var header = proxyRes.headers[key];\n      if (preserveHeaderKeyCase && rawHeaderKeyMap) {\n        key = rawHeaderKeyMap[key] || key;\n      }\n      setHeader(key, header);\n    });\n  },\n  /**\n   * Set the statusCode from the proxyResponse\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {IncomingMessage} Res Response object\n   * @param {proxyResponse} Res Response object from the proxy request\n   *\n   * @api private\n   */\n  writeStatusCode: function writeStatusCode(req, res, proxyRes) {\n    // From Node.js docs: response.writeHead(statusCode[, statusMessage][, headers])\n    if (proxyRes.statusMessage) {\n      res.statusCode = proxyRes.statusCode;\n      res.statusMessage = proxyRes.statusMessage;\n    } else {\n      res.statusCode = proxyRes.statusCode;\n    }\n  }\n};","map":{"version":3,"names":["url","require","common","redirectRegex","module","exports","removeChunked","req","res","proxyRes","httpVersion","headers","setConnection","connection","setRedirectHostRewrite","options","hostRewrite","autoRewrite","protocolRewrite","test","statusCode","target","parse","u","host","protocol","format","writeHeaders","rewriteCookieDomainConfig","cookieDomainRewrite","rewriteCookiePathConfig","cookiePathRewrite","preserveHeaderKeyCase","rawHeaderKeyMap","setHeader","key","header","undefined","toLowerCase","rewriteCookieProperty","String","trim","rawHeaders","i","length","Object","keys","forEach","writeStatusCode","statusMessage"],"sources":["C:/Users/user/Desktop/git/toy/src/main/frontend/node_modules/http-proxy/lib/http-proxy/passes/web-outgoing.js"],"sourcesContent":["var url    = require('url'),\n    common = require('../common');\n\n\nvar redirectRegex = /^201|30(1|2|7|8)$/;\n\n/*!\n * Array of passes.\n *\n * A `pass` is just a function that is executed on `req, res, options`\n * so that you can easily add new checks while still keeping the base\n * flexible.\n */\n\nmodule.exports = { // <--\n\n  /**\n   * If is a HTTP 1.0 request, remove chunk headers\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {IncomingMessage} Res Response object\n   * @param {proxyResponse} Res Response object from the proxy request\n   *\n   * @api private\n   */\n  removeChunked: function removeChunked(req, res, proxyRes) {\n    if (req.httpVersion === '1.0') {\n      delete proxyRes.headers['transfer-encoding'];\n    }\n  },\n\n  /**\n   * If is a HTTP 1.0 request, set the correct connection header\n   * or if connection header not present, then use `keep-alive`\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {IncomingMessage} Res Response object\n   * @param {proxyResponse} Res Response object from the proxy request\n   *\n   * @api private\n   */\n  setConnection: function setConnection(req, res, proxyRes) {\n    if (req.httpVersion === '1.0') {\n      proxyRes.headers.connection = req.headers.connection || 'close';\n    } else if (req.httpVersion !== '2.0' && !proxyRes.headers.connection) {\n      proxyRes.headers.connection = req.headers.connection || 'keep-alive';\n    }\n  },\n\n  setRedirectHostRewrite: function setRedirectHostRewrite(req, res, proxyRes, options) {\n    if ((options.hostRewrite || options.autoRewrite || options.protocolRewrite)\n        && proxyRes.headers['location']\n        && redirectRegex.test(proxyRes.statusCode)) {\n      var target = url.parse(options.target);\n      var u = url.parse(proxyRes.headers['location']);\n\n      // make sure the redirected host matches the target host before rewriting\n      if (target.host != u.host) {\n        return;\n      }\n\n      if (options.hostRewrite) {\n        u.host = options.hostRewrite;\n      } else if (options.autoRewrite) {\n        u.host = req.headers['host'];\n      }\n      if (options.protocolRewrite) {\n        u.protocol = options.protocolRewrite;\n      }\n\n      proxyRes.headers['location'] = u.format();\n    }\n  },\n  /**\n   * Copy headers from proxyResponse to response\n   * set each header in response object.\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {IncomingMessage} Res Response object\n   * @param {proxyResponse} Res Response object from the proxy request\n   * @param {Object} Options options.cookieDomainRewrite: Config to rewrite cookie domain\n   *\n   * @api private\n   */\n  writeHeaders: function writeHeaders(req, res, proxyRes, options) {\n    var rewriteCookieDomainConfig = options.cookieDomainRewrite,\n        rewriteCookiePathConfig = options.cookiePathRewrite,\n        preserveHeaderKeyCase = options.preserveHeaderKeyCase,\n        rawHeaderKeyMap,\n        setHeader = function(key, header) {\n          if (header == undefined) return;\n          if (rewriteCookieDomainConfig && key.toLowerCase() === 'set-cookie') {\n            header = common.rewriteCookieProperty(header, rewriteCookieDomainConfig, 'domain');\n          }\n          if (rewriteCookiePathConfig && key.toLowerCase() === 'set-cookie') {\n            header = common.rewriteCookieProperty(header, rewriteCookiePathConfig, 'path');\n          }\n          res.setHeader(String(key).trim(), header);\n        };\n\n    if (typeof rewriteCookieDomainConfig === 'string') { //also test for ''\n      rewriteCookieDomainConfig = { '*': rewriteCookieDomainConfig };\n    }\n\n    if (typeof rewriteCookiePathConfig === 'string') { //also test for ''\n      rewriteCookiePathConfig = { '*': rewriteCookiePathConfig };\n    }\n\n    // message.rawHeaders is added in: v0.11.6\n    // https://nodejs.org/api/http.html#http_message_rawheaders\n    if (preserveHeaderKeyCase && proxyRes.rawHeaders != undefined) {\n      rawHeaderKeyMap = {};\n      for (var i = 0; i < proxyRes.rawHeaders.length; i += 2) {\n        var key = proxyRes.rawHeaders[i];\n        rawHeaderKeyMap[key.toLowerCase()] = key;\n      }\n    }\n\n    Object.keys(proxyRes.headers).forEach(function(key) {\n      var header = proxyRes.headers[key];\n      if (preserveHeaderKeyCase && rawHeaderKeyMap) {\n        key = rawHeaderKeyMap[key] || key;\n      }\n      setHeader(key, header);\n    });\n  },\n\n  /**\n   * Set the statusCode from the proxyResponse\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {IncomingMessage} Res Response object\n   * @param {proxyResponse} Res Response object from the proxy request\n   *\n   * @api private\n   */\n  writeStatusCode: function writeStatusCode(req, res, proxyRes) {\n    // From Node.js docs: response.writeHead(statusCode[, statusMessage][, headers])\n    if(proxyRes.statusMessage) {\n      res.statusCode = proxyRes.statusCode;\n      res.statusMessage = proxyRes.statusMessage;\n    } else {\n      res.statusCode = proxyRes.statusCode;\n    }\n  }\n\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}