{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpProxyMiddleware = void 0;\nconst httpProxy = require(\"http-proxy\");\nconst config_factory_1 = require(\"./config-factory\");\nconst contextMatcher = require(\"./context-matcher\");\nconst handlers = require(\"./_handlers\");\nconst logger_1 = require(\"./logger\");\nconst PathRewriter = require(\"./path-rewriter\");\nconst Router = require(\"./router\");\nclass HttpProxyMiddleware {\n  constructor(context, opts) {\n    this.logger = (0, logger_1.getInstance)();\n    this.wsInternalSubscribed = false;\n    this.serverOnCloseSubscribed = false;\n    // https://github.com/Microsoft/TypeScript/wiki/'this'-in-TypeScript#red-flags-for-this\n    this.middleware = async (req, res, next) => {\n      var _a, _b;\n      if (this.shouldProxy(this.config.context, req)) {\n        try {\n          const activeProxyOptions = await this.prepareProxyRequest(req);\n          this.proxy.web(req, res, activeProxyOptions);\n        } catch (err) {\n          next(err);\n        }\n      } else {\n        next();\n      }\n      /**\n       * Get the server object to subscribe to server events;\n       * 'upgrade' for websocket and 'close' for graceful shutdown\n       *\n       * NOTE:\n       * req.socket: node >= 13\n       * req.connection: node < 13 (Remove this when node 12/13 support is dropped)\n       */\n      const server = (_b = (_a = req.socket) !== null && _a !== void 0 ? _a : req.connection) === null || _b === void 0 ? void 0 : _b.server;\n      if (server && !this.serverOnCloseSubscribed) {\n        server.on('close', () => {\n          this.logger.info('[HPM] server close signal received: closing proxy server');\n          this.proxy.close();\n        });\n        this.serverOnCloseSubscribed = true;\n      }\n      if (this.proxyOptions.ws === true) {\n        // use initial request to access the server object to subscribe to http upgrade event\n        this.catchUpgradeRequest(server);\n      }\n    };\n    this.catchUpgradeRequest = server => {\n      if (!this.wsInternalSubscribed) {\n        server.on('upgrade', this.handleUpgrade);\n        // prevent duplicate upgrade handling;\n        // in case external upgrade is also configured\n        this.wsInternalSubscribed = true;\n      }\n    };\n    this.handleUpgrade = async (req, socket, head) => {\n      if (this.shouldProxy(this.config.context, req)) {\n        const activeProxyOptions = await this.prepareProxyRequest(req);\n        this.proxy.ws(req, socket, head, activeProxyOptions);\n        this.logger.info('[HPM] Upgrading to WebSocket');\n      }\n    };\n    /**\n     * Determine whether request should be proxied.\n     *\n     * @private\n     * @param  {String} context [description]\n     * @param  {Object} req     [description]\n     * @return {Boolean}\n     */\n    this.shouldProxy = (context, req) => {\n      const path = req.originalUrl || req.url;\n      return contextMatcher.match(context, path, req);\n    };\n    /**\n     * Apply option.router and option.pathRewrite\n     * Order matters:\n     *    Router uses original path for routing;\n     *    NOT the modified path, after it has been rewritten by pathRewrite\n     * @param {Object} req\n     * @return {Object} proxy options\n     */\n    this.prepareProxyRequest = async req => {\n      // https://github.com/chimurai/http-proxy-middleware/issues/17\n      // https://github.com/chimurai/http-proxy-middleware/issues/94\n      req.url = req.originalUrl || req.url;\n      // store uri before it gets rewritten for logging\n      const originalPath = req.url;\n      const newProxyOptions = Object.assign({}, this.proxyOptions);\n      // Apply in order:\n      // 1. option.router\n      // 2. option.pathRewrite\n      await this.applyRouter(req, newProxyOptions);\n      await this.applyPathRewrite(req, this.pathRewriter);\n      // debug logging for both http(s) and websockets\n      if (this.proxyOptions.logLevel === 'debug') {\n        const arrow = (0, logger_1.getArrow)(originalPath, req.url, this.proxyOptions.target, newProxyOptions.target);\n        this.logger.debug('[HPM] %s %s %s %s', req.method, originalPath, arrow, newProxyOptions.target);\n      }\n      return newProxyOptions;\n    };\n    // Modify option.target when router present.\n    this.applyRouter = async (req, options) => {\n      let newTarget;\n      if (options.router) {\n        newTarget = await Router.getTarget(req, options);\n        if (newTarget) {\n          this.logger.debug('[HPM] Router new target: %s -> \"%s\"', options.target, newTarget);\n          options.target = newTarget;\n        }\n      }\n    };\n    // rewrite path\n    this.applyPathRewrite = async (req, pathRewriter) => {\n      if (pathRewriter) {\n        const path = await pathRewriter(req.url, req);\n        if (typeof path === 'string') {\n          req.url = path;\n        } else {\n          this.logger.info('[HPM] pathRewrite: No rewritten path found. (%s)', req.url);\n        }\n      }\n    };\n    this.logError = (err, req, res, target) => {\n      var _a;\n      const hostname = ((_a = req.headers) === null || _a === void 0 ? void 0 : _a.host) || req.hostname || req.host; // (websocket) || (node0.10 || node 4/5)\n      const requestHref = `${hostname}${req.url}`;\n      const targetHref = `${target === null || target === void 0 ? void 0 : target.href}`; // target is undefined when websocket errors\n      const errorMessage = '[HPM] Error occurred while proxying request %s to %s [%s] (%s)';\n      const errReference = 'https://nodejs.org/api/errors.html#errors_common_system_errors'; // link to Node Common Systems Errors page\n      this.logger.error(errorMessage, requestHref, targetHref, err.code || err, errReference);\n    };\n    this.config = (0, config_factory_1.createConfig)(context, opts);\n    this.proxyOptions = this.config.options;\n    // create proxy\n    this.proxy = httpProxy.createProxyServer({});\n    this.logger.info(`[HPM] Proxy created: ${this.config.context}  -> ${this.proxyOptions.target}`);\n    this.pathRewriter = PathRewriter.createPathRewriter(this.proxyOptions.pathRewrite); // returns undefined when \"pathRewrite\" is not provided\n    // attach handler to http-proxy events\n    handlers.init(this.proxy, this.proxyOptions);\n    // log errors for debug purpose\n    this.proxy.on('error', this.logError);\n    // https://github.com/chimurai/http-proxy-middleware/issues/19\n    // expose function to upgrade externally\n    this.middleware.upgrade = (req, socket, head) => {\n      if (!this.wsInternalSubscribed) {\n        this.handleUpgrade(req, socket, head);\n      }\n    };\n  }\n}\nexports.HttpProxyMiddleware = HttpProxyMiddleware;","map":{"version":3,"names":["Object","defineProperty","exports","value","HttpProxyMiddleware","httpProxy","require","config_factory_1","contextMatcher","handlers","logger_1","PathRewriter","Router","constructor","context","opts","logger","getInstance","wsInternalSubscribed","serverOnCloseSubscribed","middleware","req","res","next","_a","_b","shouldProxy","config","activeProxyOptions","prepareProxyRequest","proxy","web","err","server","socket","connection","on","info","close","proxyOptions","ws","catchUpgradeRequest","handleUpgrade","head","path","originalUrl","url","match","originalPath","newProxyOptions","assign","applyRouter","applyPathRewrite","pathRewriter","logLevel","arrow","getArrow","target","debug","method","options","newTarget","router","getTarget","logError","hostname","headers","host","requestHref","targetHref","href","errorMessage","errReference","error","code","createConfig","createProxyServer","createPathRewriter","pathRewrite","init","upgrade"],"sources":["C:/Users/user/Desktop/git/toy/src/main/frontend/node_modules/http-proxy-middleware/dist/http-proxy-middleware.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpProxyMiddleware = void 0;\nconst httpProxy = require(\"http-proxy\");\nconst config_factory_1 = require(\"./config-factory\");\nconst contextMatcher = require(\"./context-matcher\");\nconst handlers = require(\"./_handlers\");\nconst logger_1 = require(\"./logger\");\nconst PathRewriter = require(\"./path-rewriter\");\nconst Router = require(\"./router\");\nclass HttpProxyMiddleware {\n    constructor(context, opts) {\n        this.logger = (0, logger_1.getInstance)();\n        this.wsInternalSubscribed = false;\n        this.serverOnCloseSubscribed = false;\n        // https://github.com/Microsoft/TypeScript/wiki/'this'-in-TypeScript#red-flags-for-this\n        this.middleware = async (req, res, next) => {\n            var _a, _b;\n            if (this.shouldProxy(this.config.context, req)) {\n                try {\n                    const activeProxyOptions = await this.prepareProxyRequest(req);\n                    this.proxy.web(req, res, activeProxyOptions);\n                }\n                catch (err) {\n                    next(err);\n                }\n            }\n            else {\n                next();\n            }\n            /**\n             * Get the server object to subscribe to server events;\n             * 'upgrade' for websocket and 'close' for graceful shutdown\n             *\n             * NOTE:\n             * req.socket: node >= 13\n             * req.connection: node < 13 (Remove this when node 12/13 support is dropped)\n             */\n            const server = (_b = ((_a = req.socket) !== null && _a !== void 0 ? _a : req.connection)) === null || _b === void 0 ? void 0 : _b.server;\n            if (server && !this.serverOnCloseSubscribed) {\n                server.on('close', () => {\n                    this.logger.info('[HPM] server close signal received: closing proxy server');\n                    this.proxy.close();\n                });\n                this.serverOnCloseSubscribed = true;\n            }\n            if (this.proxyOptions.ws === true) {\n                // use initial request to access the server object to subscribe to http upgrade event\n                this.catchUpgradeRequest(server);\n            }\n        };\n        this.catchUpgradeRequest = (server) => {\n            if (!this.wsInternalSubscribed) {\n                server.on('upgrade', this.handleUpgrade);\n                // prevent duplicate upgrade handling;\n                // in case external upgrade is also configured\n                this.wsInternalSubscribed = true;\n            }\n        };\n        this.handleUpgrade = async (req, socket, head) => {\n            if (this.shouldProxy(this.config.context, req)) {\n                const activeProxyOptions = await this.prepareProxyRequest(req);\n                this.proxy.ws(req, socket, head, activeProxyOptions);\n                this.logger.info('[HPM] Upgrading to WebSocket');\n            }\n        };\n        /**\n         * Determine whether request should be proxied.\n         *\n         * @private\n         * @param  {String} context [description]\n         * @param  {Object} req     [description]\n         * @return {Boolean}\n         */\n        this.shouldProxy = (context, req) => {\n            const path = req.originalUrl || req.url;\n            return contextMatcher.match(context, path, req);\n        };\n        /**\n         * Apply option.router and option.pathRewrite\n         * Order matters:\n         *    Router uses original path for routing;\n         *    NOT the modified path, after it has been rewritten by pathRewrite\n         * @param {Object} req\n         * @return {Object} proxy options\n         */\n        this.prepareProxyRequest = async (req) => {\n            // https://github.com/chimurai/http-proxy-middleware/issues/17\n            // https://github.com/chimurai/http-proxy-middleware/issues/94\n            req.url = req.originalUrl || req.url;\n            // store uri before it gets rewritten for logging\n            const originalPath = req.url;\n            const newProxyOptions = Object.assign({}, this.proxyOptions);\n            // Apply in order:\n            // 1. option.router\n            // 2. option.pathRewrite\n            await this.applyRouter(req, newProxyOptions);\n            await this.applyPathRewrite(req, this.pathRewriter);\n            // debug logging for both http(s) and websockets\n            if (this.proxyOptions.logLevel === 'debug') {\n                const arrow = (0, logger_1.getArrow)(originalPath, req.url, this.proxyOptions.target, newProxyOptions.target);\n                this.logger.debug('[HPM] %s %s %s %s', req.method, originalPath, arrow, newProxyOptions.target);\n            }\n            return newProxyOptions;\n        };\n        // Modify option.target when router present.\n        this.applyRouter = async (req, options) => {\n            let newTarget;\n            if (options.router) {\n                newTarget = await Router.getTarget(req, options);\n                if (newTarget) {\n                    this.logger.debug('[HPM] Router new target: %s -> \"%s\"', options.target, newTarget);\n                    options.target = newTarget;\n                }\n            }\n        };\n        // rewrite path\n        this.applyPathRewrite = async (req, pathRewriter) => {\n            if (pathRewriter) {\n                const path = await pathRewriter(req.url, req);\n                if (typeof path === 'string') {\n                    req.url = path;\n                }\n                else {\n                    this.logger.info('[HPM] pathRewrite: No rewritten path found. (%s)', req.url);\n                }\n            }\n        };\n        this.logError = (err, req, res, target) => {\n            var _a;\n            const hostname = ((_a = req.headers) === null || _a === void 0 ? void 0 : _a.host) || req.hostname || req.host; // (websocket) || (node0.10 || node 4/5)\n            const requestHref = `${hostname}${req.url}`;\n            const targetHref = `${target === null || target === void 0 ? void 0 : target.href}`; // target is undefined when websocket errors\n            const errorMessage = '[HPM] Error occurred while proxying request %s to %s [%s] (%s)';\n            const errReference = 'https://nodejs.org/api/errors.html#errors_common_system_errors'; // link to Node Common Systems Errors page\n            this.logger.error(errorMessage, requestHref, targetHref, err.code || err, errReference);\n        };\n        this.config = (0, config_factory_1.createConfig)(context, opts);\n        this.proxyOptions = this.config.options;\n        // create proxy\n        this.proxy = httpProxy.createProxyServer({});\n        this.logger.info(`[HPM] Proxy created: ${this.config.context}  -> ${this.proxyOptions.target}`);\n        this.pathRewriter = PathRewriter.createPathRewriter(this.proxyOptions.pathRewrite); // returns undefined when \"pathRewrite\" is not provided\n        // attach handler to http-proxy events\n        handlers.init(this.proxy, this.proxyOptions);\n        // log errors for debug purpose\n        this.proxy.on('error', this.logError);\n        // https://github.com/chimurai/http-proxy-middleware/issues/19\n        // expose function to upgrade externally\n        this.middleware.upgrade = (req, socket, head) => {\n            if (!this.wsInternalSubscribed) {\n                this.handleUpgrade(req, socket, head);\n            }\n        };\n    }\n}\nexports.HttpProxyMiddleware = HttpProxyMiddleware;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}