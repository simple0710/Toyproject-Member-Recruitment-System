{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/user/Desktop/git/toy/src/main/frontend/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fireInputEvent = fireInputEvent;\nvar _dom = require(\"@testing-library/dom\");\nvar _utils = require(\"../../utils\");\nfunction fireInputEvent(element, _ref) {\n  var newValue = _ref.newValue,\n    newSelectionStart = _ref.newSelectionStart,\n    eventOverrides = _ref.eventOverrides;\n  // apply the changes before firing the input event, so that input handlers can access the altered dom and selection\n  if ((0, _utils.isContentEditable)(element)) {\n    applyNative(element, 'textContent', newValue);\n  } else /* istanbul ignore else */\n    if ((0, _utils.isElementType)(element, ['input', 'textarea'])) {\n      applyNative(element, 'value', newValue);\n    } else {\n      // TODO: properly type guard\n      throw new Error('Invalid Element');\n    }\n  setSelectionRangeAfterInput(element, newSelectionStart);\n  _dom.fireEvent.input(element, _objectSpread({}, eventOverrides));\n  setSelectionRangeAfterInputHandler(element, newValue, newSelectionStart);\n}\nfunction setSelectionRangeAfterInput(element, newSelectionStart) {\n  (0, _utils.setSelectionRange)(element, newSelectionStart, newSelectionStart);\n}\nfunction setSelectionRangeAfterInputHandler(element, newValue, newSelectionStart) {\n  var value = (0, _utils.getValue)(element); // don't apply this workaround on elements that don't necessarily report the visible value - e.g. number\n  // TODO: this could probably be only applied when there is keyboardState.carryValue\n\n  var isUnreliableValue = value === '' && (0, _utils.hasUnreliableEmptyValue)(element);\n  if (!isUnreliableValue && value === newValue) {\n    var _ref2 = (0, _utils.getSelectionRange)(element),\n      selectionStart = _ref2.selectionStart;\n    if (selectionStart === value.length) {\n      // The value was changed as expected, but the cursor was moved to the end\n      // TODO: this could probably be only applied when we work around a framework setter on the element in applyNative\n      (0, _utils.setSelectionRange)(element, newSelectionStart, newSelectionStart);\n    }\n  }\n}\nvar initial = Symbol('initial input value/textContent');\nvar onBlur = Symbol('onBlur');\n\n/**\n * React tracks the changes on element properties.\n * This workaround tries to alter the DOM element without React noticing,\n * so that it later picks up the change.\n *\n * @see https://github.com/facebook/react/blob/148f8e497c7d37a3c7ab99f01dec2692427272b1/packages/react-dom/src/client/inputValueTracking.js#L51-L104\n */\nfunction applyNative(element, propName, propValue) {\n  var descriptor = Object.getOwnPropertyDescriptor(element, propName);\n  var nativeDescriptor = Object.getOwnPropertyDescriptor(element.constructor.prototype, propName);\n  if (descriptor && nativeDescriptor) {\n    Object.defineProperty(element, propName, nativeDescriptor);\n  } // Keep track of the initial value to determine if a change event should be dispatched.\n  // CONSTRAINT: We can not determine what happened between focus event and our first API call.\n\n  if (element[initial] === undefined) {\n    element[initial] = String(element[propName]);\n  }\n  element[propName] = propValue; // Add an event listener for the blur event to the capture phase on the window.\n  // CONSTRAINT: Currently there is no cross-platform solution to unshift the event handler stack.\n  // Our change event might occur after other event handlers on the blur event have been processed.\n\n  if (!element[onBlur]) {\n    var _element$ownerDocumen;\n    (_element$ownerDocumen = element.ownerDocument.defaultView) == null ? void 0 : _element$ownerDocumen.addEventListener('blur', element[onBlur] = function () {\n      var initV = element[initial]; // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\n      delete element[onBlur]; // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\n      delete element[initial];\n      if (String(element[propName]) !== initV) {\n        _dom.fireEvent.change(element);\n      }\n    }, {\n      capture: true,\n      once: true\n    });\n  }\n  if (descriptor) {\n    Object.defineProperty(element, propName, descriptor);\n  }\n}","map":{"version":3,"names":["_objectSpread","require","default","Object","defineProperty","exports","value","fireInputEvent","_dom","_utils","element","_ref","newValue","newSelectionStart","eventOverrides","isContentEditable","applyNative","isElementType","Error","setSelectionRangeAfterInput","fireEvent","input","setSelectionRangeAfterInputHandler","setSelectionRange","getValue","isUnreliableValue","hasUnreliableEmptyValue","_ref2","getSelectionRange","selectionStart","length","initial","Symbol","onBlur","propName","propValue","descriptor","getOwnPropertyDescriptor","nativeDescriptor","constructor","prototype","undefined","String","_element$ownerDocumen","ownerDocument","defaultView","addEventListener","initV","change","capture","once"],"sources":["C:/Users/user/Desktop/git/toy/src/main/frontend/node_modules/@testing-library/user-event/dist/keyboard/shared/fireInputEvent.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fireInputEvent = fireInputEvent;\n\nvar _dom = require(\"@testing-library/dom\");\n\nvar _utils = require(\"../../utils\");\n\nfunction fireInputEvent(element, {\n  newValue,\n  newSelectionStart,\n  eventOverrides\n}) {\n  // apply the changes before firing the input event, so that input handlers can access the altered dom and selection\n  if ((0, _utils.isContentEditable)(element)) {\n    applyNative(element, 'textContent', newValue);\n  } else\n    /* istanbul ignore else */\n    if ((0, _utils.isElementType)(element, ['input', 'textarea'])) {\n      applyNative(element, 'value', newValue);\n    } else {\n      // TODO: properly type guard\n      throw new Error('Invalid Element');\n    }\n\n  setSelectionRangeAfterInput(element, newSelectionStart);\n\n  _dom.fireEvent.input(element, { ...eventOverrides\n  });\n\n  setSelectionRangeAfterInputHandler(element, newValue, newSelectionStart);\n}\n\nfunction setSelectionRangeAfterInput(element, newSelectionStart) {\n  (0, _utils.setSelectionRange)(element, newSelectionStart, newSelectionStart);\n}\n\nfunction setSelectionRangeAfterInputHandler(element, newValue, newSelectionStart) {\n  const value = (0, _utils.getValue)(element); // don't apply this workaround on elements that don't necessarily report the visible value - e.g. number\n  // TODO: this could probably be only applied when there is keyboardState.carryValue\n\n  const isUnreliableValue = value === '' && (0, _utils.hasUnreliableEmptyValue)(element);\n\n  if (!isUnreliableValue && value === newValue) {\n    const {\n      selectionStart\n    } = (0, _utils.getSelectionRange)(element);\n\n    if (selectionStart === value.length) {\n      // The value was changed as expected, but the cursor was moved to the end\n      // TODO: this could probably be only applied when we work around a framework setter on the element in applyNative\n      (0, _utils.setSelectionRange)(element, newSelectionStart, newSelectionStart);\n    }\n  }\n}\n\nconst initial = Symbol('initial input value/textContent');\nconst onBlur = Symbol('onBlur');\n\n/**\n * React tracks the changes on element properties.\n * This workaround tries to alter the DOM element without React noticing,\n * so that it later picks up the change.\n *\n * @see https://github.com/facebook/react/blob/148f8e497c7d37a3c7ab99f01dec2692427272b1/packages/react-dom/src/client/inputValueTracking.js#L51-L104\n */\nfunction applyNative(element, propName, propValue) {\n  const descriptor = Object.getOwnPropertyDescriptor(element, propName);\n  const nativeDescriptor = Object.getOwnPropertyDescriptor(element.constructor.prototype, propName);\n\n  if (descriptor && nativeDescriptor) {\n    Object.defineProperty(element, propName, nativeDescriptor);\n  } // Keep track of the initial value to determine if a change event should be dispatched.\n  // CONSTRAINT: We can not determine what happened between focus event and our first API call.\n\n\n  if (element[initial] === undefined) {\n    element[initial] = String(element[propName]);\n  }\n\n  element[propName] = propValue; // Add an event listener for the blur event to the capture phase on the window.\n  // CONSTRAINT: Currently there is no cross-platform solution to unshift the event handler stack.\n  // Our change event might occur after other event handlers on the blur event have been processed.\n\n  if (!element[onBlur]) {\n    var _element$ownerDocumen;\n\n    (_element$ownerDocumen = element.ownerDocument.defaultView) == null ? void 0 : _element$ownerDocumen.addEventListener('blur', element[onBlur] = () => {\n      const initV = element[initial]; // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\n      delete element[onBlur]; // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\n      delete element[initial];\n\n      if (String(element[propName]) !== initV) {\n        _dom.fireEvent.change(element);\n      }\n    }, {\n      capture: true,\n      once: true\n    });\n  }\n\n  if (descriptor) {\n    Object.defineProperty(element, propName, descriptor);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}