[{"C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\index.js":"1","C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\App.js":"2","C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\Footer.js":"3","C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\MainPage.js":"4","C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\NavBar.js":"5","C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\CreateForm.js":"6","C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\LoginForm.js":"7","C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\Navbar.js":"8","C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\BoardList.js":"9","C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\DetailPage.js":"10","C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\UpdateForm.js":"11","C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\JoinMemberForm.js":"12"},{"size":282,"mtime":1681867167731,"results":"13","hashOfConfig":"14"},{"size":1498,"mtime":1682062891881,"results":"15","hashOfConfig":"14"},{"size":206,"mtime":1681530466373,"results":"16","hashOfConfig":"14"},{"size":275,"mtime":1681871865957,"results":"17","hashOfConfig":"14"},{"size":1923,"mtime":1682069577884,"results":"18","hashOfConfig":"14"},{"size":5406,"mtime":1682069413294,"results":"19","hashOfConfig":"14"},{"size":1970,"mtime":1682064285088,"results":"20","hashOfConfig":"14"},{"size":851,"mtime":1681359921285,"results":"21","hashOfConfig":"14"},{"size":4389,"mtime":1682049807458,"results":"22","hashOfConfig":"14"},{"size":4243,"mtime":1682148710744,"results":"23","hashOfConfig":"14"},{"size":6615,"mtime":1682043927993,"results":"24","hashOfConfig":"14"},{"size":2042,"mtime":1682147755928,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1yai6b4",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"29"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"29"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\index.js",[],[],[],"C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\App.js",["65","66"],[],"C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\Footer.js",[],[],"C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\MainPage.js",[],[],"C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\NavBar.js",["67","68"],[],"C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\CreateForm.js",[],[],"C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\LoginForm.js",["69","70"],[],"C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\Navbar.js",[],[],"C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\BoardList.js",["71","72"],[],"import React, { useEffect, useState } from \"react\";\r\nimport Pagination from \"react-js-pagination\";\r\nimport axios from \"axios\";\r\nimport Magnifier from \"../img/pngwing.com.png\";\r\nimport \"../css/board-list.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction BoardList() {\r\n  const navigate = useNavigate();\r\n  const [totalList, setTotalList] = useState([]);\r\n  const [list, setList] = useState([]);\r\n  const [count, setCount] = useState(0);\r\n  const [page, setPage] = useState(1);\r\n  const [fixSearch, setFixSearch] = useState(\"\");\r\n  const [search, setSearch] = useState(\"\");\r\n  const [answerCntList, setAnswerCntList] = useState([]);\r\n  const itemsCnt = 20;\r\n\r\n  /** 검색한 경우 fixSearch 값 변경*/\r\n  const keyWordChange = (e) => {\r\n    e.preventDefault();\r\n    setFixSearch(search);\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  /** 페이지 이동\r\n   * 1. 스크롤 위로 올라가게 함\r\n   *\r\n   * 2. 페이지 변경\r\n   *\r\n   * 3. 화면 출력 리스트 변경\r\n   */\r\n  const pageChangeHandler = async (page) => {\r\n    setPage(page);\r\n    setList(totalList.slice((page - 1) * itemsCnt, page * itemsCnt));\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  /** 1. 글의 총 개수\r\n   *\r\n   * 2. 맨 앞의 20개의 데이터를 가져온다.\r\n   *\r\n   * 3. count 변경\r\n   */\r\n  const getList = async () => {\r\n    await axios\r\n      .get(\"/api/board/list\")\r\n      .then((res) => {\r\n        setTotalList(res.data);\r\n        setList(res.data.slice(0, itemsCnt));\r\n        setCount(res.data.length);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  /** 검색 상태 */\r\n  const searchList = async (keyword) => {\r\n    await axios\r\n      .get(\"/api/board/list/search\", { params: { title: keyword } })\r\n      .then((res) => {\r\n        setTotalList(res.data);\r\n        setList(res.data.slice(0, itemsCnt));\r\n        setCount(res.data.length);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPage(1);\r\n    // 검색한 내용이 있는 경우\r\n    if (fixSearch) {\r\n      searchList(fixSearch);\r\n      console.log(answerCntList);\r\n    }\r\n    // 검색한 내용이 없는 경우\r\n    else {\r\n      getList();\r\n    }\r\n  }, [fixSearch]);\r\n  return (\r\n    <>\r\n      {/* 검색창 */}\r\n      <form id=\"main_search\" onSubmit={keyWordChange}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"제목을 입력하세요\"\r\n          onChange={(e) => {\r\n            setSearch(e.target.value);\r\n          }}\r\n        />\r\n        <input type=\"image\" src={Magnifier} alt=\"검색\" />\r\n      </form>\r\n      {/* Post 내용 */}\r\n      <div class=\"board_list_div\">\r\n        <table class=\"board_list_table\">\r\n          {list.map(function (lists, i) {\r\n            return (\r\n              <>\r\n                <tr\r\n                  class=\"board_list\"\r\n                  onClick={(e) => {\r\n                    axios.get(`/api/board/detail/${list[i].id}`).then((res) => {\r\n                      // window.location.href = `/detail/${list[i].id}`;\r\n                      navigate(`/detail/${list[i].id}`);\r\n                    });\r\n                  }}\r\n                >\r\n                  <td class=\"board_list_title\">{list[i].title}</td>\r\n                  <td class=\"board_list_id\">{list[i].id}</td>\r\n                  <td class=\"board_list_skillStack\">\r\n                    사용 언어 : {list[i].skillStack}\r\n                  </td>\r\n                  <td class=\"board_list_workField\">\r\n                    분야 : {list[i].workField}\r\n                  </td>\r\n                  <td class=\"board_list_maxPeople\">\r\n                    정원 : {list[i].maxPeople}\r\n                  </td>\r\n                  <td calss=\"board_list_createDate\">\r\n                    작성일 : {list[i].createDate.slice(0, 10)}\r\n                  </td>\r\n                  <td>마감일 : {list[i].postEndDate}</td>\r\n                </tr>\r\n              </>\r\n            );\r\n          })}\r\n        </table>\r\n        {/* 페이징 */}\r\n        <Pagination\r\n          className=\"pagination\"\r\n          activePage={page}\r\n          itemsCountPerPage={itemsCnt}\r\n          totalItemsCount={count}\r\n          pageRangeDisplayed={5}\r\n          prevPageText={\"<\"}\r\n          nextPageText={\">\"}\r\n          onChange={pageChangeHandler}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default BoardList;\r\n","C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\DetailPage.js",["73","74"],[],"C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\UpdateForm.js",["75"],[],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nfunction UpdateForm() {\r\n  let { id } = useParams();\r\n  const [title, setTitle] = useState(\"\");\r\n  const [skillStack, setSkillStack] = useState(\"\");\r\n  const [workField, setWorkField] = useState(\"\");\r\n  const [maxPeople, setMaxPeople] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [postEndDate, setPostEndDate] = useState(\"\");\r\n\r\n  /** 마감일 최소값 구하기 */\r\n  const getDate = (e) => {\r\n    let now = new Date();\r\n    let year = String(now.getFullYear());\r\n    let todayMonth = String(now.getMonth() + 1);\r\n    let todayDate = String(now.getDate());\r\n    if (todayMonth.length < 2) {\r\n      todayMonth = \"0\" + todayMonth;\r\n    }\r\n    if (todayDate.length < 2) {\r\n      todayDate = \"0\" + todayDate;\r\n    }\r\n    let check = `${year}-${todayMonth}-${todayDate}`;\r\n    setPostEndDate(check);\r\n    const dateControl = document.querySelector('input[type=\"date\"]');\r\n    dateControl.value = check;\r\n    dateControl.min = check;\r\n  };\r\n\r\n  const updateSubmitHandler = (e) => {\r\n    const params = new URLSearchParams();\r\n    params.append(\"title\", title);\r\n    params.append(\"skillStack\", skillStack);\r\n    params.append(\"workField\", workField);\r\n    params.append(\"maxPeople\", maxPeople);\r\n    params.append(\"endDate\", endDate);\r\n    params.append(\"content\", content);\r\n    params.append(\"postEndDate\", postEndDate);\r\n    axios.post(`/api/board/update/${id}`, params);\r\n    window.location.href = `/detail/${id}`;\r\n    alert(\"수정 완료!\");\r\n  };\r\n  /** 제목 값 변경 */\r\n  const onChangeTitle = useCallback((e) => {\r\n    setTitle(e.target.value);\r\n  }, []);\r\n\r\n  const onChangeSkillStack = useCallback((e) => {\r\n    setSkillStack(e.target.value);\r\n  }, []);\r\n\r\n  const onChangeWorkField = useCallback((e) => {\r\n    setWorkField(e.target.value);\r\n  }, []);\r\n\r\n  const onChangeMaxPeople = useCallback((e) => {\r\n    setMaxPeople(e.target.value);\r\n  }, []);\r\n\r\n  const onChangeEndDate = useCallback((e) => {\r\n    setEndDate(e.target.value);\r\n  }, []);\r\n\r\n  const onChangeContent = useCallback((e) => {\r\n    setContent(e.target.value);\r\n  }, []);\r\n  /** 셀렉트의 옵션을 선택하게 하는 함수\r\n   * 셀렉트를 전체 선택 후 selectedValue안의 값으로 selected한다.\r\n   */\r\n  const selectOption = (e) => {\r\n    var opt = document.querySelectorAll(\".select\");\r\n    var selectedValue = [skillStack, workField, maxPeople, endDate];\r\n    for (var i = 0; i < opt.length; i++) {\r\n      for (var j = 0; j < opt[i].length; j++) {\r\n        if (opt[i][j].value === selectedValue[i]) {\r\n          opt[i][j].setAttribute(\"selected\", true);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  selectOption();\r\n  useEffect(() => {\r\n    getDate();\r\n    // 글 내용 불러오기\r\n    axios.get(`/api/board/detail/${id}`).then((res) => {\r\n      setTitle(res.data.title);\r\n      setSkillStack(res.data.skillStack);\r\n      setWorkField(res.data.workField);\r\n      setMaxPeople(res.data.maxPeople);\r\n      setEndDate(res.data.endDate);\r\n      setContent(res.data.content);\r\n      setPostEndDate(res.data.postEndDate);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div class=\"default_form\">\r\n        <form onSubmit={updateSubmitHandler}>\r\n          <ul>\r\n            <li class=\"default_form_title\">\r\n              <span>제목</span>\r\n              <input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n              />\r\n            </li>\r\n            <li class=\"default_form_field\">\r\n              <label for=\"skillStack\">사용 언어</label>\r\n              <select\r\n                class=\"select\"\r\n                name=\"skillStack\"\r\n                onChange={onChangeSkillStack}\r\n              >\r\n                <option value=\"React\">React</option>\r\n                <option value=\"Spring\">Spring</option>\r\n                <option value=\"JavaScript\">JavaScript</option>\r\n                <option value=\"Java\">Java</option>\r\n              </select>\r\n            </li>\r\n            <li class=\"default_form_field\">\r\n              <label for=\"workField\">분야</label>\r\n              <select\r\n                class=\"select\"\r\n                name=\"workField\"\r\n                onChange={onChangeWorkField}\r\n              >\r\n                <option value=\"Frontend\">Frontend</option>\r\n                <option value=\"Backend\">Backend</option>\r\n              </select>\r\n            </li>\r\n            <li class=\"default_form_field\">\r\n              <label for=\"maxPeople\">모집 인원</label>\r\n              <select\r\n                class=\"select\"\r\n                name=\"maxPeople\"\r\n                onChange={onChangeMaxPeople}\r\n              >\r\n                <option value=\"1명\">1명</option>\r\n                <option value=\"2명\">2명</option>\r\n                <option value=\"3명\">3명</option>\r\n                <option value=\"4명\">4명</option>\r\n                <option value=\"5명\">5명</option>\r\n                <option value=\"6명\">6명</option>\r\n                <option value=\"7명\">7명</option>\r\n                <option value=\"8명\">8명 이상</option>\r\n              </select>\r\n            </li>\r\n            <li class=\"default_form_field\">\r\n              <label for=\"endDate\">예상 기간</label>\r\n              <select class=\"select\" name=\"endDate\" onChange={onChangeEndDate}>\r\n                <option value=\"1개월\">1개월</option>\r\n                <option value=\"2개월\">2개월</option>\r\n                <option value=\"3개월\">3개월</option>\r\n                <option value=\"4개월\">4개월</option>\r\n                <option value=\"5개월\">5개월</option>\r\n                <option value=\"6개월 이상\">6개월 이상</option>\r\n              </select>\r\n            </li>\r\n            <li class=\"default_form_field\">\r\n              <label for=\"postEndDate\">마감일</label>\r\n              <input\r\n                type=\"date\"\r\n                name=\"postEndDate\"\r\n                value={postEndDate}\r\n                onChange={(e) => {\r\n                  setPostEndDate(e.target.value);\r\n                }}\r\n              ></input>\r\n            </li>\r\n          </ul>\r\n          <textarea\r\n            class=\"create_board\"\r\n            name=\"content\"\r\n            value={content}\r\n            onChange={onChangeContent}\r\n          ></textarea>\r\n          <input class=\"submit\" type=\"submit\" />\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UpdateForm;\r\n","C:\\Users\\user\\Desktop\\git\\toy\\src\\main\\frontend\\src\\components\\JoinMemberForm.js",[],[],{"ruleId":"76","severity":1,"message":"77","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":26},{"ruleId":"76","severity":1,"message":"80","line":15,"column":9,"nodeType":"78","messageId":"79","endLine":15,"endColumn":17},{"ruleId":"76","severity":1,"message":"81","line":2,"column":16,"nodeType":"78","messageId":"79","endLine":2,"endColumn":24},{"ruleId":"82","severity":1,"message":"83","line":9,"column":3,"nodeType":"78","endLine":9,"endColumn":12,"suggestions":"84"},{"ruleId":"76","severity":1,"message":"77","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":26},{"ruleId":"76","severity":1,"message":"85","line":8,"column":10,"nodeType":"78","messageId":"79","endLine":8,"endColumn":23},{"ruleId":"76","severity":1,"message":"86","line":16,"column":25,"nodeType":"78","messageId":"79","endLine":16,"endColumn":41},{"ruleId":"82","severity":1,"message":"87","line":83,"column":6,"nodeType":"88","endLine":83,"endColumn":17,"suggestions":"89"},{"ruleId":"76","severity":1,"message":"90","line":9,"column":10,"nodeType":"78","messageId":"79","endLine":9,"endColumn":14},{"ruleId":"82","severity":1,"message":"91","line":55,"column":6,"nodeType":"88","endLine":55,"endColumn":8,"suggestions":"92"},{"ruleId":"82","severity":1,"message":"93","line":100,"column":6,"nodeType":"88","endLine":100,"endColumn":8,"suggestions":"94"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'navigate' is assigned a value but never used.","'Navigate' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setIsLoggedIn'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["95"],"'loginPassword' is assigned a value but never used.","'setAnswerCntList' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'answerCntList'. Either include it or remove the dependency array.","ArrayExpression",["96"],"'name' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAnswerList' and 'id'. Either include them or remove the dependency array.",["97"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["98"],{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Add dependencies array: []",{"range":"107","text":"108"},"Update the dependencies array to be: [answerCntList, fixSearch]",{"range":"109","text":"110"},"Update the dependencies array to be: [getAnswerList, id]",{"range":"111","text":"112"},"Update the dependencies array to be: [id]",{"range":"113","text":"114"},[341,341],", []",[2068,2079],"[answerCntList, fixSearch]",[1733,1735],"[getAnswerList, id]",[3151,3153],"[id]"]